{"version":3,"sources":["index.js"],"names":["Cell","onChange","event","props","cellChange","target","value","index","cell_value","this","id","type","bind","React","Component","Main","cellParser","isNaN","parseInt","getPuzzleFromString","str","puzzle_str_arr","split","forEach","sqr_value","getRow","row_index","state","puzzle","slice","getRows","allRows","i","Math","sqrt","length","push","changeCell","newValue","puzzleCopy","setState","clear","onKeyPress","key","string","array","query","filter","e","getOccurances","rowNumber","board","checkNoDuplicates","colNumber","column","row","getColumn","gridNumber","subGrid","gridRows","includes","getSubgrid","checkRow","checkColumn","checkSubgrid","emptyIndex","findEmptyIndex","checkBoard","solve","solved","indexOf","solved_style","color","map","cell_index","a","b","className","style","onClick","placeholder","join","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.975fc0fe.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Cell extends React.Component {\n    onChange = (event) => {\n        this.props.cellChange(event.target.value, this.props.index)\n    }\n\n    render() {\n        var cell_value = this.props.value;\n        return (\n            <input\n                id={this.props.index}\n                type=\"text\"\n                value={cell_value === 0 ? \"\" : cell_value}\n                onChange={this.onChange.bind(this)}\n            />\n        )\n    }\n}\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            puzzle: this.getPuzzleFromString(this.props.puzzle)\n        };\n    }\n\n    cellParser = (value) => {\n        return isNaN(parseInt(value)) ? 0 : (0 < parseInt(value) && parseInt(value) < 10 ? parseInt(value) : 0);\n    }\n\n    getPuzzleFromString = (str) => {\n        let puzzle_str_arr = str.split(\"\");\n        puzzle_str_arr.forEach((sqr_value, index) => {\n            var value;\n            sqr_value === \".\" ? value = 0 : value = this.cellParser(sqr_value);\n            puzzle_str_arr[index] = value;\n        });\n        return puzzle_str_arr;\n    }\n\n    getRow = (row_index) => {\n        return this.state.puzzle.slice(row_index * 9, (row_index + 1) * 9);\n    }\n\n    getRows = () => {\n        var allRows = [];\n        for (var i = 0; i < Math.sqrt(this.state.puzzle.length); i++) {\n            allRows.push(this.getRow(i));\n        }\n        return allRows;\n    }\n\n    changeCell = (newValue, index) => {\n        var puzzleCopy = this.state.puzzle.slice();\n        puzzleCopy[index] = this.cellParser(newValue);\n        this.setState({\n            puzzle: puzzleCopy\n        })\n    }\n\n    clear = () => {\n        var puzzleCopy = this.state.puzzle.slice();\n        puzzleCopy.forEach((value, index) => {\n            puzzleCopy[index] = 0;\n        });\n        this.setState({\n            puzzle: puzzleCopy\n        })\n    }\n\n    // THESE METHODS NEED TO BE MOVED\n    getOccurances(array, query) {\n        return array.filter((e) => (e === query)).length;\n    }\n\n    // checks there are no duplicates in an array, where duplicate nulls are allowed\n    checkNoDuplicates(array) {\n        for (var i = 0; i < array.length; i++) {\n            if (array[i] !== 0 && this.getOccurances(array, array[i]) !== 1) return false;\n        }\n        return true;\n    }\n\n    getRow(rowNumber, board) {\n        return board.slice(rowNumber * 9, (rowNumber * 9) + 9);\n    }\n\n    checkRow(rowNumber, board) {\n        return this.checkNoDuplicates(this.getRow(rowNumber, board));\n    }\n\n    getColumn(colNumber, board) {\n        var column = [];\n        for (var i = 0; i < 9; i++) {\n            var row = this.getRow(i, board);\n            column.push(row[colNumber]);\n        }\n        return column;\n    }\n\n    checkColumn(colNumber, board) {\n        return this.checkNoDuplicates(this.getColumn(colNumber, board));\n    }\n\n    // disgusting\n    getSubgrid(gridNumber, board) {\n        var subGrid = [];\n\n        var gridRows = [];\n\n        if ([0, 1, 2].includes(gridNumber)) {\n            gridRows.push(this.getRow(0, board));\n            gridRows.push(this.getRow(1, board));\n            gridRows.push(this.getRow(2, board));\n        }\n        if ([3, 4, 5].includes(gridNumber)) {\n            gridRows.push(this.getRow(3, board));\n            gridRows.push(this.getRow(4, board));\n            gridRows.push(this.getRow(5, board));\n        }\n        if ([6, 7, 8].includes(gridNumber)) {\n            gridRows.push(this.getRow(6, board));\n            gridRows.push(this.getRow(7, board));\n            gridRows.push(this.getRow(8, board));\n        }\n\n        if ([0, 3, 6].includes(gridNumber)) {\n            for (let i = 0; i < gridRows.length; i++) {\n                gridRows[i].slice(0, 3).forEach((e) => subGrid.push(e));\n            }\n        }\n        if ([1, 4, 7].includes(gridNumber)) {\n            for (let i = 0; i < gridRows.length; i++) {\n                gridRows[i].slice(3, 6).forEach((e) => subGrid.push(e));\n            }\n        }\n        if ([2, 5, 8].includes(gridNumber)) {\n            for (let i = 0; i < gridRows.length; i++) {\n                gridRows[i].slice(6, 9).forEach((e) => subGrid.push(e));\n            }\n        }\n        return subGrid;\n    }\n\n    checkSubgrid(gridNumber, board) {\n        return this.checkNoDuplicates(this.getSubgrid(gridNumber, board));\n    }\n\n    // returns true if the board is in a valid state\n    checkBoard(board) {\n        for (var i = 0; i < 9; i++) {\n            if (!this.checkRow(i, board) || !this.checkColumn(i, board) || !this.checkSubgrid(i, board)) return false;\n        }\n        return true;\n    }\n\n    findEmptyIndex(board) {\n        for (var i = 0; i < board.length; i++) {\n            if (board[i] === 0) return i;\n        }\n        return -1;\n    }\n\n    solve(board) {\n        var emptyIndex = this.findEmptyIndex(board);\n        if (emptyIndex === -1) return true;\n\n        for (var value = 1; value < 10; value++) {\n            if (this.checkBoard(board)) {\n                board[emptyIndex] = value;\n                if (this.solve(board) && this.checkBoard(board)) {\n                    this.setState({\n                        puzzle: board\n                    });\n                    return true;\n                }\n                board[emptyIndex] = 0;\n            }\n        }\n        return false;\n    }\n\n    onKeyPress = (event) => {\n        if (event.key === \"Enter\") {\n            var string = event.target.value;\n            if (string.length === 81) {\n                var puzzleCopy = this.getPuzzleFromString(string);\n                this.setState({\n                    puzzle: puzzleCopy\n                })\n            }\n        }\n    }\n\n    render() {\n        let solved = this.checkBoard(this.state.puzzle) && this.state.puzzle.indexOf(0) === -1;\n        var solved_style = {\n            color: solved ? \"green\" : \"red\"\n        };\n        return (\n            <div>\n                <h1>reactSudoku</h1>\n\n                <table>\n                    <tbody>\n                    {this.getRows().map((row, row_index) => {\n                        return (\n                            <tr key={row_index}>\n                                {row.map((cell_value, cell_index) => {\n                                    return (\n                                        <td key={row_index * 9 + cell_index}>\n                                            <Cell\n                                                value={cell_value}\n                                                index={row_index * 9 + cell_index}\n                                                cellChange={(a, b) => this.changeCell(a, b)}\n                                            />\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })\n                    }\n                    </tbody>\n                </table>\n\n                <div className=\"settings\">\n                    <h2 style={solved_style}>\n                        {solved ? \"SOLVED\" : \"NOT SOLVED\"}\n                    </h2>\n\n                    <br/>\n\n                    <button onClick={() => this.solve(this.state.puzzle)}>Solve</button>\n                    <button onClick={() => this.clear()}>Clear</button>\n\n                    <br/>\n\n                    <textarea className=\"board-showcase\"\n                              type=\"input\"\n                              placeholder=\"Enter puzzle here...\"\n                              onKeyPress={this.onKeyPress.bind(this)}\n                    />\n\n                    <br/>\n                    Current Board\n                    <br/>\n\n                    <textarea className=\"board-showcase\" value={this.state.puzzle.join(\"\").replace(/0/g, \".\")}/>\n                </div>\n            </div>\n        );\n    }\n}\n\n// TODO have more puzzles to return\nlet getRandomPuzzle = () => {\n    return \"...26.7.168..7..9.19...45..82.1...4...46.29...5...3.28..93...74.4..5..367.3.18...\";\n}\n\nReactDOM.render(\n    <Main puzzle={getRandomPuzzle()}/>,\n    document.getElementById('root')\n);"],"sourceRoot":""}